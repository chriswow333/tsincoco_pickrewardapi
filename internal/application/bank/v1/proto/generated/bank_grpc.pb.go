// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bank.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankV1Client is the client API for BankV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankV1Client interface {
	GetAllBanks(ctx context.Context, in *AllBanksReq, opts ...grpc.CallOption) (*BanksReply, error)
}

type bankV1Client struct {
	cc grpc.ClientConnInterface
}

func NewBankV1Client(cc grpc.ClientConnInterface) BankV1Client {
	return &bankV1Client{cc}
}

func (c *bankV1Client) GetAllBanks(ctx context.Context, in *AllBanksReq, opts ...grpc.CallOption) (*BanksReply, error) {
	out := new(BanksReply)
	err := c.cc.Invoke(ctx, "/bank.v1.BankV1/GetAllBanks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankV1Server is the server API for BankV1 service.
// All implementations must embed UnimplementedBankV1Server
// for forward compatibility
type BankV1Server interface {
	GetAllBanks(context.Context, *AllBanksReq) (*BanksReply, error)
	mustEmbedUnimplementedBankV1Server()
}

// UnimplementedBankV1Server must be embedded to have forward compatible implementations.
type UnimplementedBankV1Server struct {
}

func (UnimplementedBankV1Server) GetAllBanks(context.Context, *AllBanksReq) (*BanksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBanks not implemented")
}
func (UnimplementedBankV1Server) mustEmbedUnimplementedBankV1Server() {}

// UnsafeBankV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankV1Server will
// result in compilation errors.
type UnsafeBankV1Server interface {
	mustEmbedUnimplementedBankV1Server()
}

func RegisterBankV1Server(s grpc.ServiceRegistrar, srv BankV1Server) {
	s.RegisterService(&BankV1_ServiceDesc, srv)
}

func _BankV1_GetAllBanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllBanksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankV1Server).GetAllBanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.v1.BankV1/GetAllBanks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankV1Server).GetAllBanks(ctx, req.(*AllBanksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BankV1_ServiceDesc is the grpc.ServiceDesc for BankV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.v1.BankV1",
	HandlerType: (*BankV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBanks",
			Handler:    _BankV1_GetAllBanks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bank.proto",
}
