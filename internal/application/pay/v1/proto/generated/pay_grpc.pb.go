// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pay.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayV1Client is the client API for PayV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayV1Client interface {
	GetPayByID(ctx context.Context, in *PayIDReq, opts ...grpc.CallOption) (*PayReply, error)
	GetAllPays(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*PaysReply, error)
}

type payV1Client struct {
	cc grpc.ClientConnInterface
}

func NewPayV1Client(cc grpc.ClientConnInterface) PayV1Client {
	return &payV1Client{cc}
}

func (c *payV1Client) GetPayByID(ctx context.Context, in *PayIDReq, opts ...grpc.CallOption) (*PayReply, error) {
	out := new(PayReply)
	err := c.cc.Invoke(ctx, "/pay.v1.PayV1/GetPayByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payV1Client) GetAllPays(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*PaysReply, error) {
	out := new(PaysReply)
	err := c.cc.Invoke(ctx, "/pay.v1.PayV1/GetAllPays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayV1Server is the server API for PayV1 service.
// All implementations must embed UnimplementedPayV1Server
// for forward compatibility
type PayV1Server interface {
	GetPayByID(context.Context, *PayIDReq) (*PayReply, error)
	GetAllPays(context.Context, *EmptyReq) (*PaysReply, error)
	mustEmbedUnimplementedPayV1Server()
}

// UnimplementedPayV1Server must be embedded to have forward compatible implementations.
type UnimplementedPayV1Server struct {
}

func (UnimplementedPayV1Server) GetPayByID(context.Context, *PayIDReq) (*PayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayByID not implemented")
}
func (UnimplementedPayV1Server) GetAllPays(context.Context, *EmptyReq) (*PaysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPays not implemented")
}
func (UnimplementedPayV1Server) mustEmbedUnimplementedPayV1Server() {}

// UnsafePayV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayV1Server will
// result in compilation errors.
type UnsafePayV1Server interface {
	mustEmbedUnimplementedPayV1Server()
}

func RegisterPayV1Server(s grpc.ServiceRegistrar, srv PayV1Server) {
	s.RegisterService(&PayV1_ServiceDesc, srv)
}

func _PayV1_GetPayByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayV1Server).GetPayByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.v1.PayV1/GetPayByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayV1Server).GetPayByID(ctx, req.(*PayIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayV1_GetAllPays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayV1Server).GetAllPays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pay.v1.PayV1/GetAllPays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayV1Server).GetAllPays(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PayV1_ServiceDesc is the grpc.ServiceDesc for PayV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pay.v1.PayV1",
	HandlerType: (*PayV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayByID",
			Handler:    _PayV1_GetPayByID_Handler,
		},
		{
			MethodName: "GetAllPays",
			Handler:    _PayV1_GetAllPays_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
