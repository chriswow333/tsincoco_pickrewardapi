// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: image.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageV1Client is the client API for ImageV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageV1Client interface {
	DownloadImage(ctx context.Context, in *ImageReq, opts ...grpc.CallOption) (*ImageReply, error)
}

type imageV1Client struct {
	cc grpc.ClientConnInterface
}

func NewImageV1Client(cc grpc.ClientConnInterface) ImageV1Client {
	return &imageV1Client{cc}
}

func (c *imageV1Client) DownloadImage(ctx context.Context, in *ImageReq, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, "/image.v1.ImageV1/DownloadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageV1Server is the server API for ImageV1 service.
// All implementations must embed UnimplementedImageV1Server
// for forward compatibility
type ImageV1Server interface {
	DownloadImage(context.Context, *ImageReq) (*ImageReply, error)
	mustEmbedUnimplementedImageV1Server()
}

// UnimplementedImageV1Server must be embedded to have forward compatible implementations.
type UnimplementedImageV1Server struct {
}

func (UnimplementedImageV1Server) DownloadImage(context.Context, *ImageReq) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedImageV1Server) mustEmbedUnimplementedImageV1Server() {}

// UnsafeImageV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageV1Server will
// result in compilation errors.
type UnsafeImageV1Server interface {
	mustEmbedUnimplementedImageV1Server()
}

func RegisterImageV1Server(s grpc.ServiceRegistrar, srv ImageV1Server) {
	s.RegisterService(&ImageV1_ServiceDesc, srv)
}

func _ImageV1_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageV1Server).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/image.v1.ImageV1/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageV1Server).DownloadImage(ctx, req.(*ImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageV1_ServiceDesc is the grpc.ServiceDesc for ImageV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image.v1.ImageV1",
	HandlerType: (*ImageV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadImage",
			Handler:    _ImageV1_DownloadImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "image.proto",
}
